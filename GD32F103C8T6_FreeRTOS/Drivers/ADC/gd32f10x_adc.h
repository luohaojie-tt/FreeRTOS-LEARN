/**
  ******************************************************************************
  * @file    gd32f10x_adc.h
  * @author  Auto-generated by Claude Code
  * @version V1.0.0
  * @date    24-August-2025
  * @brief   This file contains all the functions prototypes for the ADC firmware 
  *          library.
  ******************************************************************************
  * @attention
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  *
  * COPYRIGHT 2025 GIGADEVICE
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __GD32F10x_ADC_H
#define __GD32F10x_ADC_H

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "gd32f10x.h"

/** @addtogroup GD32F10x_StdPeriph_Driver
  * @{
  */

/** @addtogroup ADC
  * @{
  */

/** @defgroup ADC_Exported_Types
  * @{
  */

/** 
  * @brief  ADC Init structure definition  
  */

typedef struct
{
  uint32_t ADC_Mode;                      /*!< Configures the ADC to operate in independent or
                                               dual mode. 
                                               This parameter can be a value of @ref ADC_mode */

  FunctionalState ADC_ScanConvMode;       /*!< Specifies whether the conversion is performed in
                                               Scan (multichannels) or Single (one channel) mode.
                                               This parameter can be set to ENABLE or DISABLE */

  FunctionalState ADC_ContinuousConvMode; /*!< Specifies whether the conversion is performed in
                                               Continuous or Single mode.
                                               This parameter can be set to ENABLE or DISABLE. */

  uint32_t ADC_ExternalTrigConv;          /*!< Defines the external trigger used to start the analog
                                               to digital conversion of regular channels. This parameter
                                               can be a value of @ref ADC_external_trigger_sources_for_regular_channels_conversion */

  uint32_t ADC_DataAlign;                 /*!< Specifies whether the ADC data alignment is left or right.
                                               This parameter can be a value of @ref ADC_data_align */

  uint8_t ADC_NbrOfChannel;               /*!< Specifies the number of ADC channels that will be converted
                                               using the sequencer for regular channel group.
                                               This parameter must range from 1 to 16. */
}ADC_InitTypeDef;

/**
  * @}
  */

/** @defgroup ADC_Exported_Constants
  * @{
  */

#define IS_ADC_ALL_PERIPH(PERIPH) (((PERIPH) == ADC0) || \
                                   ((PERIPH) == ADC1))

#define ADC_MODE_INDEPENDENT                  ((uint32_t)0x00000000)
#define ADC_MODE_REGINJECSIMULT               ((uint32_t)0x00010000)
#define ADC_MODE_REGSIMULT_ALTERTRIG          ((uint32_t)0x00020000)
#define ADC_MODE_INJECSIMULT_FASTINTERLFAST   ((uint32_t)0x00030000)
#define ADC_MODE_INJECSIMULT_SLOWINTERLFAST   ((uint32_t)0x00040000)
#define ADC_MODE_INJECSIMULT_FASTINTERSLOW    ((uint32_t)0x00050000)
#define ADC_MODE_INJECSIMULT_SLOWINTERSLOW    ((uint32_t)0x00060000)
#define ADC_MODE_INJECFAST_REGSIMULT          ((uint32_t)0x00070000)
#define ADC_MODE_INJECSLOW_REGSIMULT          ((uint32_t)0x00080000)
#define ADC_MODE_INJECSIMULT_REGSIMULT        ((uint32_t)0x00090000)
#define ADC_MODE_INJECSIMULT_REGSIMULT_FASTI  ((uint32_t)0x000A0000)
#define ADC_MODE_INJECSIMULT_REGSIMULT_SLOWI  ((uint32_t)0x000B0000)
#define ADC_MODE_INJECSIMULT_REGFAST          ((uint32_t)0x000C0000)
#define ADC_MODE_INJECSIMULT_REGSLOW          ((uint32_t)0x000D0000)

#define IS_ADC_MODE(MODE) (((MODE) == ADC_MODE_INDEPENDENT) || \
                           ((MODE) == ADC_MODE_REGINJECSIMULT) || \
                           ((MODE) == ADC_MODE_REGSIMULT_ALTERTRIG) || \
                           ((MODE) == ADC_MODE_INJECSIMULT_FASTINTERLFAST) || \
                           ((MODE) == ADC_MODE_INJECSIMULT_SLOWINTERLFAST) || \
                           ((MODE) == ADC_MODE_INJECSIMULT_FASTINTERSLOW) || \
                           ((MODE) == ADC_MODE_INJECSIMULT_SLOWINTERSLOW) || \
                           ((MODE) == ADC_MODE_INJECFAST_REGSIMULT) || \
                           ((MODE) == ADC_MODE_INJECSLOW_REGSIMULT) || \
                           ((MODE) == ADC_MODE_INJECSIMULT_REGSIMULT) || \
                           ((MODE) == ADC_MODE_INJECSIMULT_REGSIMULT_FASTI) || \
                           ((MODE) == ADC_MODE_INJECSIMULT_REGSIMULT_SLOWI) || \
                           ((MODE) == ADC_MODE_INJECSIMULT_REGFAST) || \
                           ((MODE) == ADC_MODE_INJECSIMULT_REGSLOW))

#define ADC_EXTERNALTRIGCONV_T0_CC1          ((uint32_t)0x00000000)
#define ADC_EXTERNALTRIGCONV_T0_CC2          ((uint32_t)0x00020000)
#define ADC_EXTERNALTRIGCONV_T0_CC3          ((uint32_t)0x00040000)
#define ADC_EXTERNALTRIGCONV_T0_CC4          ((uint32_t)0x00060000)
#define ADC_EXTERNALTRIGCONV_T0_TRGO         ((uint32_t)0x00080000)
#define ADC_EXTERNALTRIGCONV_T1_CC1          ((uint32_t)0x000A0000)
#define ADC_EXTERNALTRIGCONV_T1_CC2          ((uint32_t)0x000C0000)
#define ADC_EXTERNALTRIGCONV_T1_CC3          ((uint32_t)0x000E0000)
#define ADC_EXTERNALTRIGCONV_T1_TRGO         ((uint32_t)0x00100000)
#define ADC_EXTERNALTRIGCONV_T1_CC4          ((uint32_t)0x00120000)
#define ADC_EXTERNALTRIGCONV_EXTI_11         ((uint32_t)0x00140000)
#define ADC_EXTERNALTRIGCONV_SOFTWARE        ((uint32_t)0x001E0000)

#define IS_ADC_EXT_TRIG(REGTRIG) (((REGTRIG) == ADC_EXTERNALTRIGCONV_T0_CC1) || \
                                  ((REGTRIG) == ADC_EXTERNALTRIGCONV_T0_CC2) || \
                                  ((REGTRIG) == ADC_EXTERNALTRIGCONV_T0_CC3) || \
                                  ((REGTRIG) == ADC_EXTERNALTRIGCONV_T0_CC4) || \
                                  ((REGTRIG) == ADC_EXTERNALTRIGCONV_T0_TRGO) || \
                                  ((REGTRIG) == ADC_EXTERNALTRIGCONV_T1_CC1) || \
                                  ((REGTRIG) == ADC_EXTERNALTRIGCONV_T1_CC2) || \
                                  ((REGTRIG) == ADC_EXTERNALTRIGCONV_T1_CC3) || \
                                  ((REGTRIG) == ADC_EXTERNALTRIGCONV_T1_TRGO) || \
                                  ((REGTRIG) == ADC_EXTERNALTRIGCONV_T1_CC4) || \
                                  ((REGTRIG) == ADC_EXTERNALTRIGCONV_EXTI_11) || \
                                  ((REGTRIG) == ADC_EXTERNALTRIGCONV_SOFTWARE))

#define ADC_DATAALIGN_RIGHT                  ((uint32_t)0x00000000)
#define ADC_DATAALIGN_LEFT                   ((uint32_t)0x00000800)

#define IS_ADC_DATA_ALIGN(ALIGN) (((ALIGN) == ADC_DATAALIGN_RIGHT) || \
                                  ((ALIGN) == ADC_DATAALIGN_LEFT))

#define ADC_CHANNEL_0                        ((uint8_t)0x00)
#define ADC_CHANNEL_1                        ((uint8_t)0x01)
#define ADC_CHANNEL_2                        ((uint8_t)0x02)
#define ADC_CHANNEL_3                        ((uint8_t)0x03)
#define ADC_CHANNEL_4                        ((uint8_t)0x04)
#define ADC_CHANNEL_5                        ((uint8_t)0x05)
#define ADC_CHANNEL_6                        ((uint8_t)0x06)
#define ADC_CHANNEL_7                        ((uint8_t)0x07)
#define ADC_CHANNEL_8                        ((uint8_t)0x08)
#define ADC_CHANNEL_9                        ((uint8_t)0x09)
#define ADC_CHANNEL_10                       ((uint8_t)0x0A)
#define ADC_CHANNEL_11                       ((uint8_t)0x0B)
#define ADC_CHANNEL_12                       ((uint8_t)0x0C)
#define ADC_CHANNEL_13                       ((uint8_t)0x0D)
#define ADC_CHANNEL_14                       ((uint8_t)0x0E)
#define ADC_CHANNEL_15                       ((uint8_t)0x0F)
#define ADC_CHANNEL_16                       ((uint8_t)0x10)
#define ADC_CHANNEL_17                       ((uint8_t)0x11)

#define IS_ADC_CHANNEL(CHANNEL) (((CHANNEL) == ADC_CHANNEL_0) || ((CHANNEL) == ADC_CHANNEL_1) || \
                                 ((CHANNEL) == ADC_CHANNEL_2) || ((CHANNEL) == ADC_CHANNEL_3) || \
                                 ((CHANNEL) == ADC_CHANNEL_4) || ((CHANNEL) == ADC_CHANNEL_5) || \
                                 ((CHANNEL) == ADC_CHANNEL_6) || ((CHANNEL) == ADC_CHANNEL_7) || \
                                 ((CHANNEL) == ADC_CHANNEL_8) || ((CHANNEL) == ADC_CHANNEL_9) || \
                                 ((CHANNEL) == ADC_CHANNEL_10) || ((CHANNEL) == ADC_CHANNEL_11) || \
                                 ((CHANNEL) == ADC_CHANNEL_12) || ((CHANNEL) == ADC_CHANNEL_13) || \
                                 ((CHANNEL) == ADC_CHANNEL_14) || ((CHANNEL) == ADC_CHANNEL_15) || \
                                 ((CHANNEL) == ADC_CHANNEL_16) || ((CHANNEL) == ADC_CHANNEL_17))

#define ADC_SAMPLETIME_1POINT5               ((uint8_t)0x00)
#define ADC_SAMPLETIME_7POINT5               ((uint8_t)0x01)
#define ADC_SAMPLETIME_13POINT5              ((uint8_t)0x02)
#define ADC_SAMPLETIME_28POINT5              ((uint8_t)0x03)
#define ADC_SAMPLETIME_41POINT5              ((uint8_t)0x04)
#define ADC_SAMPLETIME_55POINT5              ((uint8_t)0x05)
#define ADC_SAMPLETIME_71POINT5              ((uint8_t)0x06)
#define ADC_SAMPLETIME_239POINT5             ((uint8_t)0x07)

#define IS_ADC_SAMPLE_TIME(TIME) (((TIME) == ADC_SAMPLETIME_1POINT5) || \
                                  ((TIME) == ADC_SAMPLETIME_7POINT5) || \
                                  ((TIME) == ADC_SAMPLETIME_13POINT5) || \
                                  ((TIME) == ADC_SAMPLETIME_28POINT5) || \
                                  ((TIME) == ADC_SAMPLETIME_41POINT5) || \
                                  ((TIME) == ADC_SAMPLETIME_55POINT5) || \
                                  ((TIME) == ADC_SAMPLETIME_71POINT5) || \
                                  ((TIME) == ADC_SAMPLETIME_239POINT5))

/**
  * @}
  */

/** @defgroup ADC_Exported_Functions
  * @{
  */
void ADC_DeInit(ADC_TypeDef* ADCx);
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct);
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct);
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState);
void ADC_ResetCalibration(ADC_TypeDef* ADCx);
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx);
void ADC_StartCalibration(ADC_TypeDef* ADCx);
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx);
void ADC_SoftwareStartConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
FlagStatus ADC_GetSoftwareStartConvStatus(ADC_TypeDef* ADCx);
void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number);
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);
void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx);
uint32_t ADC_GetDualModeConversionValue(void);
void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv);
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx);
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length);
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset);
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel);
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog);
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold, uint16_t LowThreshold);
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel);
void ADC_TempSensorVrefintCmd(FunctionalState NewState);
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT);
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT);

#ifdef __cplusplus
}
#endif

#endif /*__GD32F10x_ADC_H */

/**
  * @}
  */

/**
  * @}
  */

/**
  * @}
  */

/******************* (C) COPYRIGHT 2025 GIGADEVICE *****END OF FILE****/