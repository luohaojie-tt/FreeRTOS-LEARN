/**
  ******************************************************************************
  * @file    gd32f10x_pwm.h
  * @author  Auto-generated by Claude Code
  * @version V1.0.0
  * @date    24-August-2025
  * @brief   This file contains all the functions prototypes for the PWM firmware 
  *          library.
  ******************************************************************************
  * @attention
  *
  * THE PRESENT FIRMWARE WHICH IS FOR GUIDANCE ONLY AIMS AT PROVIDING CUSTOMERS
  * WITH CODING INFORMATION REGARDING THEIR PRODUCTS IN ORDER FOR THEM TO SAVE
  * TIME. AS A RESULT, STMICROELECTRONICS SHALL NOT BE HELD LIABLE FOR ANY
  * DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES WITH RESPECT TO ANY CLAIMS ARISING
  * FROM THE CONTENT OF SUCH FIRMWARE AND/OR THE USE MADE BY CUSTOMERS OF THE
  * CODING INFORMATION CONTAINED HEREIN IN CONNECTION WITH THEIR PRODUCTS.
  *
  * COPYRIGHT 2025 GIGADEVICE
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __GD32F10x_PWM_H
#define __GD32F10x_PWM_H

#ifdef __cplusplus
 extern "C" {
#endif

/* Includes ------------------------------------------------------------------*/
#include "gd32f10x.h"

/** @addtogroup GD32F10x_StdPeriph_Driver
  * @{
  */

/** @addtogroup PWM
  * @{
  */

/** @defgroup PWM_Exported_Types
  * @{
  */

/** 
  * @brief  PWM Init structure definition  
  */

typedef struct
{
  uint16_t PWM_Channel;              /*!< Specifies the PWM channel.
                                          This parameter can be a value of @ref PWM_channel */

  uint32_t PWM_Frequency;            /*!< Specifies the PWM frequency.
                                          This parameter must be a value between 0 and 1000000 Hz */

  uint16_t PWM_DutyCycle;            /*!< Specifies the PWM duty cycle.
                                          This parameter must be a number between 0 and 100 */

  uint16_t PWM_CounterMode;          /*!< Specifies the counter mode.
                                          This parameter can be a value of @ref PWM_counter_mode */

  uint16_t PWM_OCMode;               /*!< Specifies the PWM output compare mode.
                                          This parameter can be a value of @ref PWM_output_compare_mode */

  uint16_t PWM_OCPolarity;           /*!< Specifies the output compare polarity.
                                          This parameter can be a value of @ref PWM_output_compare_polarity */

  FunctionalState PWM_OutputState;   /*!< Specifies the output state of the PWM channel.
                                          This parameter can be set to ENABLE or DISABLE */

  FunctionalState PWM_OutputNState;  /*!< Specifies the complementary output state of the PWM channel.
                                          This parameter can be set to ENABLE or DISABLE (only for advanced timers) */

  uint16_t PWM_Pulse;                /*!< Specifies the pulse value to be loaded into the Capture Compare Register. 
                                          This parameter can be a number between 0x0000 and 0xFFFF */

  uint16_t PWM_OCNIdleState;         /*!< Specifies the off-state value of the complementary output.
                                          This parameter can be a value of @ref PWM_Output_Compare_N_Idle_State (only for advanced timers) */

  uint16_t PWM_OCIdleState;          /*!< Specifies the off-state value of the output.
                                          This parameter can be a value of @ref PWM_Output_Compare_Idle_State (only for advanced timers) */
}PWM_InitTypeDef;

/**
  * @}
  */

/** @defgroup PWM_Exported_Constants
  * @{
  */

#define IS_PWM_ALL_PERIPH(PERIPH) (((PERIPH) == TIMER0) || \
                                   ((PERIPH) == TIMER1) || \
                                   ((PERIPH) == TIMER2) || \
                                   ((PERIPH) == TIMER3) || \
                                   ((PERIPH) == TIMER4))

/** @defgroup PWM_channel 
  * @{
  */
#define PWM_CHANNEL_0                      ((uint16_t)0x0000)
#define PWM_CHANNEL_1                      ((uint16_t)0x0004)
#define PWM_CHANNEL_2                      ((uint16_t)0x0008)
#define PWM_CHANNEL_3                      ((uint16_t)0x000C)

#define IS_PWM_CHANNEL(CHANNEL) (((CHANNEL) == PWM_CHANNEL_0) || \
                                 ((CHANNEL) == PWM_CHANNEL_1) || \
                                 ((CHANNEL) == PWM_CHANNEL_2) || \
                                 ((CHANNEL) == PWM_CHANNEL_3))
/**
  * @}
  */

/** @defgroup PWM_counter_mode 
  * @{
  */
#define PWM_COUNTERMODE_UP                 ((uint16_t)0x0000)
#define PWM_COUNTERMODE_DOWN               TIMER_CTL0_DIR
#define PWM_COUNTERMODE_CENTERALIGNED1     TIMER_CTL0_CAM_0
#define PWM_COUNTERMODE_CENTERALIGNED2     TIMER_CTL0_CAM_1
#define PWM_COUNTERMODE_CENTERALIGNED3     TIMER_CTL0_CAM

#define IS_PWM_COUNTER_MODE(MODE) (((MODE) == PWM_COUNTERMODE_UP) ||  \
                                   ((MODE) == PWM_COUNTERMODE_DOWN) || \
                                   ((MODE) == PWM_COUNTERMODE_CENTERALIGNED1) || \
                                   ((MODE) == PWM_COUNTERMODE_CENTERALIGNED2) || \
                                   ((MODE) == PWM_COUNTERMODE_CENTERALIGNED3))
/**
  * @}
  */

/** @defgroup PWM_output_compare_mode 
  * @{
  */
#define PWM_OCMODE_TIMING                  ((uint16_t)0x0000)
#define PWM_OCMODE_ACTIVE                  ((uint16_t)0x0010)
#define PWM_OCMODE_INACTIVE                ((uint16_t)0x0020)
#define PWM_OCMODE_TOGGLE                  ((uint16_t)0x0030)
#define PWM_OCMODE_PWM1                    ((uint16_t)0x0060)
#define PWM_OCMODE_PWM2                    ((uint16_t)0x0070)

#define IS_PWM_OC_MODE(MODE) (((MODE) == PWM_OCMODE_TIMING) || \
                              ((MODE) == PWM_OCMODE_ACTIVE) || \
                              ((MODE) == PWM_OCMODE_INACTIVE) || \
                              ((MODE) == PWM_OCMODE_TOGGLE)|| \
                              ((MODE) == PWM_OCMODE_PWM1) || \
                              ((MODE) == PWM_OCMODE_PWM2))
/**
  * @}
  */

/** @defgroup PWM_output_compare_polarity 
  * @{
  */
#define PWM_OCPOLARITY_HIGH                ((uint16_t)0x0000)
#define PWM_OCPOLARITY_LOW                 ((uint16_t)0x0002)

#define IS_PWM_OC_POLARITY(POLARITY) (((POLARITY) == PWM_OCPOLARITY_HIGH) || \
                                      ((POLARITY) == PWM_OCPOLARITY_LOW))
/**
  * @}
  */

/** @defgroup PWM_Output_Compare_Idle_State 
  * @{
  */
#define PWM_OCIDLESTATE_RESET              ((uint16_t)0x0000)
#define PWM_OCIDLESTATE_SET                ((uint16_t)0x0100)

#define IS_PWM_OUTPUT_IDLE_STATE(STATE) (((STATE) == PWM_OCIDLESTATE_RESET) || \
                                         ((STATE) == PWM_OCIDLESTATE_SET))
/**
  * @}
  */

/** @defgroup PWM_Output_Compare_N_Idle_State 
  * @{
  */
#define PWM_OCNIDLESTATE_RESET             ((uint16_t)0x0000)
#define PWM_OCNIDLESTATE_SET               ((uint16_t)0x0200)

#define IS_PWM_OUTPUTN_IDLE_STATE(STATE) (((STATE) == PWM_OCNIDLESTATE_RESET) || \
                                          ((STATE) == PWM_OCNIDLESTATE_SET))
/**
  * @}
  */

/**
  * @}
  */

/** @defgroup PWM_Exported_Functions
  * @{
  */
void PWM_DeInit(TIMER_TypeDef* TIMERx);
void PWM_Init(TIMER_TypeDef* TIMERx, PWM_InitTypeDef* PWM_InitStruct);
void PWM_StructInit(PWM_InitTypeDef* PWM_InitStruct);
void PWM_Cmd(TIMER_TypeDef* TIMERx, FunctionalState NewState);
void PWM_CtrlPWMOutput(TIMER_TypeDef* TIMERx, FunctionalState NewState);
void PWM_OC1FastConfig(TIMER_TypeDef* TIMERx, uint16_t PWM_OCFast);
void PWM_OC2FastConfig(TIMER_TypeDef* TIMERx, uint16_t PWM_OCFast);
void PWM_OC3FastConfig(TIMER_TypeDef* TIMERx, uint16_t PWM_OCFast);
void PWM_OC4FastConfig(TIMER_TypeDef* TIMERx, uint16_t PWM_OCFast);
void PWM_SetCompare1(TIMER_TypeDef* TIMERx, uint32_t Compare1);
void PWM_SetCompare2(TIMER_TypeDef* TIMERx, uint32_t Compare2);
void PWM_SetCompare3(TIMER_TypeDef* TIMERx, uint32_t Compare3);
void PWM_SetCompare4(TIMER_TypeDef* TIMERx, uint32_t Compare4);
void PWM_SetAutoreload(TIMER_TypeDef* TIMERx, uint32_t Autoreload);
void PWM_SetPrescaler(TIMER_TypeDef* TIMERx, uint16_t Prescaler);
void PWM_GenerateEvent(TIMER_TypeDef* TIMERx, uint16_t PWM_EventSource);

#ifdef __cplusplus
}
#endif

#endif /*__GD32F10x_PWM_H */

/**
  * @}
  */

/**
  * @}
  */

/**
  * @}
  */

/******************* (C) COPYRIGHT 2025 GIGADEVICE *****END OF FILE****/